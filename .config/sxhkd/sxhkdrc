# gracz sxhkd

#
# wm independent hotkeys
#

# terminal emulator
super + Return
	xst

# program launcher
super + d
	dmenu_run

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd & notify-send "reloaded sxhkd" 

#
# bspwm hotkeys
#

# quit/restart bspwm
super + shift + {e,r}
	bspc {quit,wm -r & notify-send "reloaded bspwm"}

# close and kill
super + {_,shift + }q
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest node
super + g
	bspc node -s biggest

#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous node in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}

# increase/decrease gaps globally/on current workspace
#	super + {_,shift + }{minus,equal}
#	bspc config {,-d focused} window_gap $(($(bspc config window_gap){-,+}5))
#super + shift + {minus, equal}
#    { bspc config window_gap $(( $(bspc config -m focused window_gap) + 10 )), \
#    [ $(bspc config -m focused window_gap) -ge 5 ] && \
#    bspc config -d focused window_gap $(( $(bspc config -m focused window_gap) - 5 )) }

# change inner gaps on current desktop/monitor
super + shift + {minus, equal}
	{ bspc config -m focused window_gap $(( $(bspc config -m focused window_gap) + 5 )), \
	[ $(bspc config -m focused window_gap) -ge 5 ] && \
	bspc config -m focused window_gap $(( $(bspc config -m focused window_gap) - 5 )) }

super + {minus, equal}
	{ bspc config -d focused window_gap $(( $(bspc config -d focused window_gap) + 5 )), \
	[ $(bspc config -d focused window_gap) -ge 5 ] && \
	bspc config -d focused window_gap $(( $(bspc config -d focused window_gap) - 5 )) }
    

# increase/decrease gaps on current workspace/monitor
super + {_,shift + }BackSpace
	bspc config -{d,m} focused window_gap $(bspc config window_gap)

#
# non-wm keybinds
#

# brightness up/down
XF86MonBrightness{Up,Down}
	xbacklight -{inc,dec} 10

# media keys

# volume up/down
XF86Audio{Raise,Lower}Volume
	wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%{+,-}

# mute
XF86AudioMute
	wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle

# screenshots

# fullscreen
Print + {_,super}
	maim --format png -m 7 {"/tmp/$(date +%F_%T)" && mv "$_" ~/pics/scr/$(basename "$_")_screenshot_$(identify -format %wx%h "$_").png && notify-send "screenshot to scr", | xclip -selection c -t image/png && notify-send "screenshot to clip"}

# window
alt + Print + {_,super}
	maim -i $(xdotool getactivewindow) -B --quiet --format png -m 7 {"/tmp/$(date +%F_%T)" && mv "$_" ~/pics/scr/$(basename "$_")_screenshot_$(identify -format %wx%h "$_").png && notify-send "screenshot to scr", | xclip -selection c -t image/png && notify-send "screenshot to clip"}

# snippet
ctrl + Print + {_,super}
	maim -souk --format png -m 7 {"/tmp/$(date +%F_%T)" && mv "$_" ~/pics/scr/$(basename "$_")_screenshot_$(identify -format %wx%h "$_").png && notify-send "screenshot to scr", | xclip -selection c -t image/png && notify-send "screenshot to clip"}

# lock
super + XF86Calculator
	slock

#XF86PowerOff
#	[ choice = $(echo -e "Shutdown\nReboot" | dmenu -i); case $choice in;  Shutdown); shutdown -h now;; Reboot); reboot;; esac ]
